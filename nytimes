var jqry = document.createElement('script');
jqry.src = "https://code.jquery.com/jquery-3.3.1.min.js";
document.getElementsByTagName('head')[0].appendChild(jqry);

var grid = [];
var arr = [];
var transGrid = [];
var master = [];
var current;



function autoSolve() {
    captureGrid();
    main();
}

function captureGrid() {
    var i = 0;
    grid = [];
    transGrid = [];
    master = [];
    arr = [];
    $('div.guess').each(function() {
        if (i % 9 == 0) {
            grid.push(arr.slice());
            transGrid.push(arr.slice());
            master.push(arr.slice());
            arr = [];
        }
        console.log(i + '.- ' + $.type($(this).html()) + ' - ' + parseInt($(this).html()));
        arr.push(parseInt($(this).text()) || '');
        i++;
    });
    grid.push(arr.slice());
    grid.shift();

    for (i = 0; i < 9; i++) {
        for (var j = 0; j < 9; j++) {
            transGrid[j][i] = grid[i][j];
        }
    }

    console.table(grid);
    console.table(transGrid);
    console.table(master);
}

function main() {
    var retArr = [0, 0, 1];
    do {

        retArr = solve(retArr[0], retArr[1], retArr[2]);

    } while (retArr[0] != 'x');console.table(grid);
    var flatGrid = [].concat.apply([], grid);
    var i = 0;
    $('div.guess').each(function() {
        if (!$(this).hasClass('prefilled')) {
            $(this).text(flatGrid[i]).siblings('.candidates').css('display', 'none')
        }
        i++;
    });

}

function solve(posI, posJ, move) {
    if (master[posI][posJ] != undefined) {
        return move == 1 ? [posJ == 8 ? ++posI : posI, posJ == 8 ? 0 : ++posJ, move] : [posJ == 0 ? --posI : posI, posJ == 0 ? 8 : --posJ, move];
    }
    var index;
    num = grid[posI][posJ];
    grid[posI][posJ] = 0;
    transGrid[posJ][posI] = 0;

    var possibleValues = getPossibleValues(posI, posJ);
    index = possibleValues.indexOf(num);
    if (possibleValues.length == 0 || (index == (possibleValues.length - 1))) {
        return [posJ == 0 ? --posI : posI, posJ == 0 ? 8 : --posJ, 0];
    } else {
        num = possibleValues[index + 1];
        grid[posI][posJ] = num;
        transGrid[posJ][posI] = num;
        current = ref[posI][posJ];
        $("div.cell-wrapper:eq(" + current + ") div.guess").text(num).siblings('.candidates').css('display', 'none');

        if (posI == 8 && posJ == 8) {
            return ['x', 'x'];
        }
        return [posJ == 8 ? ++posI : posI, posJ == 8 ? 0 : ++posJ, 1];

    }

}

function isValidInRow(gridVal, gridRow) {
    return grid[gridRow].indexOf(gridVal) == -1 ? true : false;
}

function isValidInColumn(gridVal, gridColumn) {
    return transGrid[gridColumn].indexOf(gridVal) == -1 ? true : false;
}

function isValidInBox(gridVal, gridRow, gridColumn) {
    var boxIndexI = Math.round((gridRow - 1) / 3) * 3;
    var boxIndexJ = Math.round((gridColumn - 1) / 3) * 3;
    for (var i = boxIndexI; i < boxIndexI + 3; i++) {
        for (var j = boxIndexJ; j < boxIndexJ + 3; j++) {
            if (grid[i][j] == gridVal) {
                return false;
            }
        }
    }
    return true;
}

function getPossibleValues(posI, posJ) {
    var possibleValues = [];
    for (var i = 1; i < 10; i++) {
        if (isValidInRow(i, posI) && isValidInColumn(i, posJ) && isValidInBox(i, posI, posJ)) {
            possibleValues.push(i);
        }
    }
    return possibleValues;
}

